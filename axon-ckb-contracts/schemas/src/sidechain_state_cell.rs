// Generated by Molecule 0.7.0

use super::common::basic_types::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct SSC(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for SSC {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for SSC {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for SSC {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "chain_id", self.chain_id())?;
        write!(f, ", {}: {}", "version", self.version())?;
        write!(
            f,
            ", {}: {}",
            "latest_sidechain_height",
            self.latest_sidechain_height()
        )?;
        write!(
            f,
            ", {}: {}",
            "latest_sidechain_block_hash",
            self.latest_sidechain_block_hash()
        )?;
        write!(
            f,
            ", {}: {}",
            "confirmed_sidechain_height",
            self.confirmed_sidechain_height()
        )?;
        write!(
            f,
            ", {}: {}",
            "confirmed_sidechain_block_hash",
            self.confirmed_sidechain_block_hash()
        )?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for SSC {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        SSC::new_unchecked(v.into())
    }
}
impl SSC {
    pub const TOTAL_SIZE: usize = 83;
    pub const FIELD_SIZES: [usize; 6] = [1, 2, 8, 32, 8, 32];
    pub const FIELD_COUNT: usize = 6;
    pub fn chain_id(&self) -> Uint8 {
        Uint8::new_unchecked(self.0.slice(0..1))
    }
    pub fn version(&self) -> Uint16 {
        Uint16::new_unchecked(self.0.slice(1..3))
    }
    pub fn latest_sidechain_height(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(3..11))
    }
    pub fn latest_sidechain_block_hash(&self) -> Bytes32 {
        Bytes32::new_unchecked(self.0.slice(11..43))
    }
    pub fn confirmed_sidechain_height(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(43..51))
    }
    pub fn confirmed_sidechain_block_hash(&self) -> Bytes32 {
        Bytes32::new_unchecked(self.0.slice(51..83))
    }
    pub fn as_reader<'r>(&'r self) -> SSCReader<'r> {
        SSCReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for SSC {
    type Builder = SSCBuilder;
    const NAME: &'static str = "SSC";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        SSC(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SSCReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SSCReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .chain_id(self.chain_id())
            .version(self.version())
            .latest_sidechain_height(self.latest_sidechain_height())
            .latest_sidechain_block_hash(self.latest_sidechain_block_hash())
            .confirmed_sidechain_height(self.confirmed_sidechain_height())
            .confirmed_sidechain_block_hash(self.confirmed_sidechain_block_hash())
    }
}
#[derive(Clone, Copy)]
pub struct SSCReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for SSCReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for SSCReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for SSCReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "chain_id", self.chain_id())?;
        write!(f, ", {}: {}", "version", self.version())?;
        write!(
            f,
            ", {}: {}",
            "latest_sidechain_height",
            self.latest_sidechain_height()
        )?;
        write!(
            f,
            ", {}: {}",
            "latest_sidechain_block_hash",
            self.latest_sidechain_block_hash()
        )?;
        write!(
            f,
            ", {}: {}",
            "confirmed_sidechain_height",
            self.confirmed_sidechain_height()
        )?;
        write!(
            f,
            ", {}: {}",
            "confirmed_sidechain_block_hash",
            self.confirmed_sidechain_block_hash()
        )?;
        write!(f, " }}")
    }
}
impl<'r> SSCReader<'r> {
    pub const TOTAL_SIZE: usize = 83;
    pub const FIELD_SIZES: [usize; 6] = [1, 2, 8, 32, 8, 32];
    pub const FIELD_COUNT: usize = 6;
    pub fn chain_id(&self) -> Uint8Reader<'r> {
        Uint8Reader::new_unchecked(&self.as_slice()[0..1])
    }
    pub fn version(&self) -> Uint16Reader<'r> {
        Uint16Reader::new_unchecked(&self.as_slice()[1..3])
    }
    pub fn latest_sidechain_height(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[3..11])
    }
    pub fn latest_sidechain_block_hash(&self) -> Bytes32Reader<'r> {
        Bytes32Reader::new_unchecked(&self.as_slice()[11..43])
    }
    pub fn confirmed_sidechain_height(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[43..51])
    }
    pub fn confirmed_sidechain_block_hash(&self) -> Bytes32Reader<'r> {
        Bytes32Reader::new_unchecked(&self.as_slice()[51..83])
    }
}
impl<'r> molecule::prelude::Reader<'r> for SSCReader<'r> {
    type Entity = SSC;
    const NAME: &'static str = "SSCReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        SSCReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SSCBuilder {
    pub(crate) chain_id: Uint8,
    pub(crate) version: Uint16,
    pub(crate) latest_sidechain_height: Uint64,
    pub(crate) latest_sidechain_block_hash: Bytes32,
    pub(crate) confirmed_sidechain_height: Uint64,
    pub(crate) confirmed_sidechain_block_hash: Bytes32,
}
impl SSCBuilder {
    pub const TOTAL_SIZE: usize = 83;
    pub const FIELD_SIZES: [usize; 6] = [1, 2, 8, 32, 8, 32];
    pub const FIELD_COUNT: usize = 6;
    pub fn chain_id(mut self, v: Uint8) -> Self {
        self.chain_id = v;
        self
    }
    pub fn version(mut self, v: Uint16) -> Self {
        self.version = v;
        self
    }
    pub fn latest_sidechain_height(mut self, v: Uint64) -> Self {
        self.latest_sidechain_height = v;
        self
    }
    pub fn latest_sidechain_block_hash(mut self, v: Bytes32) -> Self {
        self.latest_sidechain_block_hash = v;
        self
    }
    pub fn confirmed_sidechain_height(mut self, v: Uint64) -> Self {
        self.confirmed_sidechain_height = v;
        self
    }
    pub fn confirmed_sidechain_block_hash(mut self, v: Bytes32) -> Self {
        self.confirmed_sidechain_block_hash = v;
        self
    }
}
impl molecule::prelude::Builder for SSCBuilder {
    type Entity = SSC;
    const NAME: &'static str = "SSCBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.chain_id.as_slice())?;
        writer.write_all(self.version.as_slice())?;
        writer.write_all(self.latest_sidechain_height.as_slice())?;
        writer.write_all(self.latest_sidechain_block_hash.as_slice())?;
        writer.write_all(self.confirmed_sidechain_height.as_slice())?;
        writer.write_all(self.confirmed_sidechain_block_hash.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SSC::new_unchecked(inner.into())
    }
}
